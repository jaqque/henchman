#!/bin/echo Please use source 

print 'Setting up for vcs info themes'
autoload -Uz vcs_info
function precmd() { vcs_info }

# colors!
# You can use names or numbers. I like names.
color_branch='magenta'
color_staged='blue'
color_unstaged='red'
color_clean='green'
color_action='cyan'

format="(%B%F{$color_branch}%b%f%%b"
change_format="(%B%F{$color_branch}%b%f%%b|"
actionformat="(%B%F{$color_branch}%b%f%%b|%F{$color_action}%a%f"
change_actionformat="(%B%F{$color_branch}%b%f%%b:%F{$color_action}%a%f|"
not_smart='[%s]-'
not_smart_mark='%#'
changes='%u%c'
no_changes='%{%}'
# default repo format:
zstyle ':vcs_info:*' max-exports 3
zstyle ':vcs_info:*' formats $not_smart$format $not_smart_mark $changes
zstyle ':vcs_info:*' actionformats $not_smart$actionformat $not_smart_mark $changes
zstyle ':vcs_info:*' nvcsformats '' $not_smart_mark

# smart marks:
# We specify width, since some terminals get upset otherwise
sm_bzr='%2{⚯ %}'
sm_fossil='%2{⌘ %}'
sm_git='%1{±%}'
sm_hg='%1{☿%}'
sm_svn='%1{‡%}'

zstyle ':vcs_info:bzr:*' formats $format $sm_bzr $no_changes
zstyle ':vcs_info:bzr:*' actionformats $actionformat $sm_bzr $no_changes

zstyle ':vcs_info:fossil:*' formats $format $sm_fossil $no_changes
zstyle ':vcs_info:fossil:*' actionformats $actionformat $sm_fossil $no_changes

zstyle ':vcs_info:git:*' formats $change_format $sm_git $changes
zstyle ':vcs_info:git:*' actionformats $change_actionformat $sm_git $changes

zstyle ':vcs_info:hg:*' formats $format $sm_hg $no_changes
zstyle ':vcs_info:hg:*' actionformats $actionformat $sm_hg $no_changes

zstyle ':vcs_info:svn:*' formats $format $sm_svn $no_changes
zstyle ':vcs_info:svn:*' actionformats $actionformat $sm_svn $no_changes

# Make %u and %c useful:
zstyle ':vcs_info:*' check-for-changes true

# For %u and %c to work for mercurial, extra steps are required:
zstyle ':vcs_info:hg:*' get-revision true
zstyle ':vcs_info:hg:*' use-simple false # default, but why trust that?

# Make use of mercurial's local revision number
zstyle ':vcs_info:hg:*' hgrevformat '%r:%8.8h' # this is %i in formats
zstyle ':vcs_info:hg:*' hgrevformat '%r' # this is %i in formats
zstyle ':vcs_info:hg:*' branchformat '%b(%r)'
zstyle ':vcs_info:hg:*' branchformat '%r:%b'

# These need to have spaces, since they appear double-wide, except for new file
# Only in some fonts are they that way
#   staged:    blue ✚
# unstaged:     red ●
# all good:   green ✔
# new file: default …
#    ahead: ↑
#   behind: ↓
# diverged: ↕
zstyle ':vcs_info:*' stagedstr "%F{$color_staged}%2{✚ %}%f"
zstyle ':vcs_info:*' unstagedstr "%F{$color_unstaged}%2{● %}%f"

# How to integrate checking for pushes/pulls server side? what hook?

# To allow the green checkmarks to work, we need to define vcs_info_2_ to be a nonprinting
# non-null.  %{%} works for this purpos. Looks ugly, but it's the option
PS1='%F{5}[%F{2}%n%F{5}]%f %F{3}%3~%f ${vcs_info_msg_0_:+${vcs_info_msg_0_}${vcs_info_msg_2_:-%F{green\}%1{✔%\}%f})}%B${vcs_info_msg_1_}%b '


# % escapes:

# %! history number
# %# %(!.#.%%)
# %% %
# %( %(...) if/then/else
# %) )
# %* time (24 hours, with seconds)
# %. trailing commponent of $PWD
# %/ $PWD
# %< %<...< left truncation
# %> %>...> right truncation
# %? status code
# %@ time (am/pm)
# %a (action)
# %b (branch name)
# %b (branch: branch name)
# %b stop bold
# %B start bold
# %c (changes staged)
# %c (patch: number of unapplied patches)
# %c trailing commponent of $PWD with ~ contraction
# %C trailing commponent of $PWD
# %d $PWD
# %D %D{string} strftime
# %D date (yy-mm-dd)
# %E clear to end of line
# %f stop foreground color
# %F start foreground color
# %g (patch: names of active mq guards)
# %G (patch: number of active mq guards)
# %G glitch - specify width in %{...%}
# %h (hgrev: 40 byte hash)
# %h history number
# %i (identifier or revision)
# %i current line number $PS4
# %I current line number of current file $PS4
# %j number of jobs
# %k stop background color
# %K start background color
# %l line/tty
# %L $SHLVL
# %m (misc replacement [git/hg patch])
# %m hostname up to first .
# %M FQDN
# %n $USERNAME
# %n (patch: number of applied patches)
# %N name of current script / $0
# %p (patch: top patch applied [applied-string])
# %r (branch: current revision)
# %r (hgrev: local revision)
# %r (repository name)
# %R (repository base directory)
# %s (vcs in use)
# %s stop standout
# %S (subdirectory within repository)
# %S start standout
# %t time (am/pm)
# %T time (24hr)
# %u (patch: number of unapplied patches [unapplied-string])
# %u (unstaged changes)
# %u stop underline
# %U start underline
# %v $psvar
# %w date in day-dd
# %W date mm/dd/yy
# %x name of file with current source code executed
# %y tty w/o /dev
# %[ %[x...] left(x=<) or right (x=>) truncation
# %_ status of parser (if/for) $PS2
# %{ start literal escape
# %} stop literal escape
# %~ $PWD, with ~ contraction
