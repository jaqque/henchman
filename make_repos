#!/bin/sh

TARGET=${1:-/var/tmp/playground}

mkdir -p "$TARGET"

[ -d "$TARGET" ] || { echo "No such directory: $TARGET"; exit 1; }
[ -w "$TARGET" ] || { echo "Read-only directory: $TARGET"; exit 2; }

cd "$TARGET"

master="gitmaster.git"
#added="gitadded"
ahead="gitahead"
behind="gitbehind"
clean="gitclean"
clone="gitclone"
#deleted="gitdeleted"
dirty="gitdirty"
diverged="gitdiverged"
everything="giteverything"
#renamed="gitrenamed"
stage="gitstage"
unknown="gitunknown"
work="gitwork"

echo "Creating git repos:"
git init --bare $master
git init $work # independent
for i in $ahead $behind $clean $clone $dirty $diverged $everything $stage $unknown; do
	git clone $master $i
	( cd $i
	  git config user.name "Test User"
	  git config user.email "test@example.com"
	)
done

(
	cd $behind
	echo first > file
	git add file
	git commit file -m 'first'
	git push
)

(
	cd $diverged
	git pull
	echo diverge >> file
	git add file
	git commit file -m 'diverge'
)

(
	cd $everything
	git pull
	echo everything >> file
	git add file
	git commit file -m 'everything'
)

(
	cd $ahead
	git pull
	echo second >> file
	git add file
	git commit file -m 'second'
	git push
	echo ahead >> file
	git add file
	git commit file -m 'ahead'
)

(
	cd $behind
	git fetch
)

(
	cd $diverged
	git fetch
)

(
	cd $everything
	git fetch
	echo everything > everything
	echo everything  >> file
	git add file
	echo everything >> file
)

(
	cd $clean
	git pull
)

(
	cd $dirty
	git pull
	echo dirty >> file
)

(
	cd $stage
	git pull
	echo staged >> file
	git add file
)

(
	cd $unknown
	git pull
	echo unknown > new_file
)

# Mercurial

master="$TARGET/hgmaster"
#added="$TARGET/hgadded"
ahead="$TARGET/hgahead"
behind="$TARGET/hgbehind"
clean="$TARGET/hgclean"
clone="$TARGET/hgclone"
#deleted="$TARGET/hgdeleted"
dirty="$TARGET/hgdirty"
diverged="$TARGET/hgdiverged"
everything="$TARGET/hgeverything"
#renamed="$TARGET/hgrenamed"
#stage="$TARGET/hgstage"
unknown="$TARGET/hgunknown"
work="$TARGET/hgwork"

echo "Creating mercurial repos:"
hg init "$master"
echo zeroth > "$master/file"
hg -R "$master" add "$master/file"
hg -R "$master" commit -m 'zeroth'

hg init "$work" # work is independent

for i in "$ahead" "$behind" "$clean" "$clone" "$diverged" "$dirty" "$everything" "$unknown"; do
	hg clone "$master" "$i"
done

repo="$behind"
echo first >> "$repo/file"
hg add -R "$repo" "$repo/file"
hg commit -R "$repo" -m 'first'
hg push -R "$repo"
hg update -R "$master"

repo="$diverged"
hg -R "$repo" pull
hg -R "$repo" update
echo diverged >> "$repo/file"
hg commit -R "$repo" -m 'diverged'

repo="$everything"
hg -R "$repo" pull
hg -R "$repo" update
echo deverything >> "$repo/file"
hg commit -R "$repo" -m 'everything'

repo="$ahead"
hg -R "$repo" pull
hg -R "$repo" update
echo second >> "$repo/file"
hg commit -R "$repo" -m 'second'
hg push -R "$repo"
echo ahead >> "$repo/file"
hg commit -R "$repo" -m 'ahead'

repo="$everything"
echo everything > "$repo/everything"
echo everything >> "$repo/file"

repo="$clean"
hg pull -R "$repo"
hg update -R "$repo"

repo="$dirty"
hg pull -R "$repo"
hg update -R "$repo"
echo dirty >> "$repo/file"

repo="$unknown"
hg pull -R "$repo"
hg update -R "$repo"
echo unknown >> "$repo/unknown"


# bazaar
commands[bzr]=/bin/true
mkdir -p bzrtest/.bzr/branch
touch bzrtest/.bzr/branch/format

# codeville
commands[cdv]=/bin/true
mkdir -p cdvtest/.cdv
touch cdvtest/.cdv/format

# Concurrent Versioning System
commands[cvs]=/bin/true
mkdir -p cvstest/CVS
touch cvstest/CVS/Repository

# darcs
commands[darcs]=/bin/true
mkdir -p darcstest/_darcs
touch darcstest/_darcs/format

# Fossil
commands[fossil]=/bin/true
mkdir fossiltest
touch fossiltest/_FOSSIL_

# Monotone
commands[mtn]=/bin/true
mkdir -p mtntest/_MTN
touch mtntest/_MTN/revision

# Perforce
commands[p4]=/bin/true
mkdir p4test
touch p4test/_p4config
P4CONFIG=_p4config

# svk
# svk requires a file in $HOME, so we'll skip it


# Subversion
commands[svn]=/bin/true
mkdir -p svntest/.svn
touch svntest/.svn/entries svntest/.svn/format

# Arch
# As soon as we set commands[tla], *everything* becomes an arch repo
# commands[tla]=/bin/true

